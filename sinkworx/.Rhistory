dplyr::mutate(., Elapsed.Time.m = NULL, RFU = NULL)
Sink_Fits <- rbind(Sink_Fits, sink_fits)
} # close loop through wells
if (export_output == TRUE) {
write.csv(Sink_Fits, file = save_as, row.names = F)
} # close export option
return(Sink_Fits)
}
bmg_fits <- sink_fit(bmg_subset, export_output = FALSE)
View(bmg_fits)
bmg_data <- dplyr::inner_join(bmg_subset, bmg_fits)
View(bmg_data)
sink_plot <- function(database_rfu, database_fits, size = 3, shape = 6, colour = "darkgreen", fill = "white",
shared_int = FALSE, line_1 = "red", line_2 = "blue", line_3 = "black",
export_output = TRUE, save_as = "Sinking_Plots.pdf") {
## -----------------------------------------------------------------------------------------
database <- dplyr::inner_join(database_rfu, database_fits)
plot_by <- paste(database$Plate, database$Well)
wells <- unique(plot_by)
if (export_output == TRUE) {
pdf(save_as)
}
for (w in 1:length(wells)) {
focus_well <- wells[w]
well_data <- dplyr::filter(database, focus_well == plot_by)
p <- ggplot2::ggplot(well_data, ggplot2::aes(Elapsed.Time.m, sqrt(RFU))) +
ggplot2::geom_point(size = size, shape = shape, colour = colour, fill = fill) +
ggplot2::theme_classic() +
ggplot2::labs(x = "Elapsed time (minutes)", y = "sqrt(RFU)", title = well_data$Well) +
ggplot2::theme(axis.title = ggplot2::element_text(size = 16, colour = "black", face = "bold")) +
ggplot2::theme(axis.text = ggplot2::element_text(size = 16, colour = "black")) +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5, size = 18, face = "bold"))
if (shared_int == FALSE) {
p <- p +
ggplot2::geom_abline(intercept = intercept_1, slope = slope_1, colour = line_1, lty = 2, size = 1.25) +
ggplot2::geom_abline(intercept = intercept_2, slope = slope_2, colour = line_2, lty = 2, size = 1.25) +
ggplot2::geom_abline(intercept = intercept_3, slope = slope_3, colour = line_3, lty = 2, size = 1.25)
} else if (shared_int == TRUE) {
p <- p +
ggplot2::geom_abline(intercept = intercept_1, slope = slope_1, colour = line_1, lty = 2, size = 1.25) +
ggplot2::geom_abline(intercept = intercept_1, slope = slope_2, colour = line_2, lty = 2, size = 1.25) +
ggplot2::geom_abline(intercept = intercept_1, slope = slope_3, colour = line_3, lty = 2, size = 1.25)
}
print(p)
} # close loop through wells
if (export_output == TRUE) {
dev.off()
} # close device
}
sink_plot(bmg_subset, bmg_fits, export_output = FALSE)
sink_plot <- function(database_rfu, database_fits, size = 3, shape = 6, colour = "darkgreen", fill = "white",
shared_int = FALSE, line_1 = "red", line_2 = "blue", line_3 = "black",
export_output = TRUE, save_as = "Sinking_Plots.pdf") {
## -----------------------------------------------------------------------------------------
database <- dplyr::inner_join(database_rfu, database_fits)
plot_by <- paste(database$Plate, database$Well)
wells <- unique(plot_by)
if (export_output == TRUE) {
pdf(save_as)
}
for (w in 1:length(wells)) {
focus_well <- wells[w]
well_data <- dplyr::filter(database, focus_well == plot_by)
p <- ggplot2::ggplot(well_data, ggplot2::aes(Elapsed.Time.m, sqrt(RFU))) +
ggplot2::geom_point(size = size, shape = shape, colour = colour, fill = fill) +
ggplot2::theme_classic() +
ggplot2::labs(x = "Elapsed time (minutes)", y = "sqrt(RFU)", title = well_data$Well) +
ggplot2::theme(axis.title = ggplot2::element_text(size = 16, colour = "black", face = "bold")) +
ggplot2::theme(axis.text = ggplot2::element_text(size = 16, colour = "black")) +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5, size = 18, face = "bold"))
if (shared_int == FALSE) {
p <- p +
ggplot2::geom_abline(well_data, aes(intercept = intercept_1, slope = slope_1, colour = line_1, lty = 2, size = 1.25)) +
ggplot2::geom_abline(intercept = intercept_2, slope = slope_2, colour = line_2, lty = 2, size = 1.25) +
ggplot2::geom_abline(intercept = intercept_3, slope = slope_3, colour = line_3, lty = 2, size = 1.25)
} else if (shared_int == TRUE) {
p <- p +
ggplot2::geom_abline(intercept = intercept_1, slope = slope_1, colour = line_1, lty = 2, size = 1.25) +
ggplot2::geom_abline(intercept = intercept_1, slope = slope_2, colour = line_2, lty = 2, size = 1.25) +
ggplot2::geom_abline(intercept = intercept_1, slope = slope_3, colour = line_3, lty = 2, size = 1.25)
}
print(p)
} # close loop through wells
if (export_output == TRUE) {
dev.off()
} # close device
}
sink_plot(bmg_subset, bmg_fits, export_output = FALSE)
sink_plot <- function(database_rfu, database_fits, size = 3, shape = 6, colour = "darkgreen", fill = "white",
shared_int = FALSE, line_1 = "red", line_2 = "blue", line_3 = "black",
export_output = TRUE, save_as = "Sinking_Plots.pdf") {
## -----------------------------------------------------------------------------------------
database <- dplyr::inner_join(database_rfu, database_fits)
plot_by <- paste(database$Plate, database$Well)
wells <- unique(plot_by)
if (export_output == TRUE) {
pdf(save_as)
}
for (w in 1:length(wells)) {
focus_well <- wells[w]
well_data <- dplyr::filter(database, focus_well == plot_by)
p <- ggplot2::ggplot(well_data, ggplot2::aes(Elapsed.Time.m, sqrt(RFU))) +
ggplot2::geom_point(size = size, shape = shape, colour = colour, fill = fill) +
ggplot2::theme_classic() +
ggplot2::labs(x = "Elapsed time (minutes)", y = "sqrt(RFU)", title = well_data$Well) +
ggplot2::theme(axis.title = ggplot2::element_text(size = 16, colour = "black", face = "bold")) +
ggplot2::theme(axis.text = ggplot2::element_text(size = 16, colour = "black")) +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5, size = 18, face = "bold"))
if (shared_int == FALSE) {
p <- p +
ggplot2::geom_abline(well_data, ggplot2::aes(intercept = intercept_1, slope = slope_1, colour = line_1, lty = 2, size = 1.25)) +
ggplot2::geom_abline(intercept = intercept_2, slope = slope_2, colour = line_2, lty = 2, size = 1.25) +
ggplot2::geom_abline(intercept = intercept_3, slope = slope_3, colour = line_3, lty = 2, size = 1.25)
} else if (shared_int == TRUE) {
p <- p +
ggplot2::geom_abline(intercept = intercept_1, slope = slope_1, colour = line_1, lty = 2, size = 1.25) +
ggplot2::geom_abline(intercept = intercept_1, slope = slope_2, colour = line_2, lty = 2, size = 1.25) +
ggplot2::geom_abline(intercept = intercept_1, slope = slope_3, colour = line_3, lty = 2, size = 1.25)
}
print(p)
} # close loop through wells
if (export_output == TRUE) {
dev.off()
} # close device
}
sink_plot(bmg_subset, bmg_fits, export_output = FALSE)
sink_plot <- function(database_rfu, database_fits, size = 3, shape = 6, colour = "darkgreen", fill = "white",
shared_int = FALSE, line_1 = "red", line_2 = "blue", line_3 = "black",
export_output = TRUE, save_as = "Sinking_Plots.pdf") {
## -----------------------------------------------------------------------------------------
database <- dplyr::inner_join(database_rfu, database_fits)
plot_by <- paste(database$Plate, database$Well)
wells <- unique(plot_by)
if (export_output == TRUE) {
pdf(save_as)
}
for (w in 1:length(wells)) {
focus_well <- wells[w]
well_data <- dplyr::filter(database, focus_well == plot_by)
p <- ggplot2::ggplot(well_data, ggplot2::aes(Elapsed.Time.m, sqrt(RFU))) +
ggplot2::geom_point(size = size, shape = shape, colour = colour, fill = fill) +
ggplot2::theme_classic() +
ggplot2::labs(x = "Elapsed time (minutes)", y = "sqrt(RFU)", title = well_data$Well) +
ggplot2::theme(axis.title = ggplot2::element_text(size = 16, colour = "black", face = "bold")) +
ggplot2::theme(axis.text = ggplot2::element_text(size = 16, colour = "black")) +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5, size = 18, face = "bold"))
if (shared_int == FALSE) {
p <- p +
ggplot2::geom_abline(intercept = well_data$intercept_1, slope = slope_1, colour = line_1, lty = 2, size = 1.25) +
ggplot2::geom_abline(intercept = intercept_2, slope = slope_2, colour = line_2, lty = 2, size = 1.25) +
ggplot2::geom_abline(intercept = intercept_3, slope = slope_3, colour = line_3, lty = 2, size = 1.25)
} else if (shared_int == TRUE) {
p <- p +
ggplot2::geom_abline(intercept = intercept_1, slope = slope_1, colour = line_1, lty = 2, size = 1.25) +
ggplot2::geom_abline(intercept = intercept_1, slope = slope_2, colour = line_2, lty = 2, size = 1.25) +
ggplot2::geom_abline(intercept = intercept_1, slope = slope_3, colour = line_3, lty = 2, size = 1.25)
}
print(p)
} # close loop through wells
if (export_output == TRUE) {
dev.off()
} # close device
}
sink_plot(bmg_subset, bmg_fits, export_output = FALSE)
sink_plot <- function(database_rfu, database_fits, size = 3, shape = 6, colour = "darkgreen", fill = "white",
shared_int = FALSE, line_1 = "red", line_2 = "blue", line_3 = "black",
export_output = TRUE, save_as = "Sinking_Plots.pdf") {
## -----------------------------------------------------------------------------------------
database <- dplyr::inner_join(database_rfu, database_fits)
plot_by <- paste(database$Plate, database$Well)
wells <- unique(plot_by)
if (export_output == TRUE) {
pdf(save_as)
}
for (w in 1:length(wells)) {
focus_well <- wells[w]
well_data <- dplyr::filter(database, focus_well == plot_by)
p <- ggplot2::ggplot(well_data, ggplot2::aes(Elapsed.Time.m, sqrt(RFU))) +
ggplot2::geom_point(size = size, shape = shape, colour = colour, fill = fill) +
ggplot2::theme_classic() +
ggplot2::labs(x = "Elapsed time (minutes)", y = "sqrt(RFU)", title = well_data$Well) +
ggplot2::theme(axis.title = ggplot2::element_text(size = 16, colour = "black", face = "bold")) +
ggplot2::theme(axis.text = ggplot2::element_text(size = 16, colour = "black")) +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5, size = 18, face = "bold"))
if (shared_int == FALSE) {
p <- p +
ggplot2::geom_abline(intercept = well_data$intercept_1, slope = well_data$slope_1, colour = line_1, lty = 2, size = 1.25) +
ggplot2::geom_abline(intercept = well_data$intercept_2, slope = well_data$slope_2, colour = line_2, lty = 2, size = 1.25) +
ggplot2::geom_abline(intercept = well_data$intercept_3, slope = well_data$slope_3, colour = line_3, lty = 2, size = 1.25)
} else if (shared_int == TRUE) {
p <- p +
ggplot2::geom_abline(intercept = well_data$intercept_1, slope = well_data$slope_1, colour = line_1, lty = 2, size = 1.25) +
ggplot2::geom_abline(intercept = well_data$intercept_1, slope = well_data$slope_2, colour = line_2, lty = 2, size = 1.25) +
ggplot2::geom_abline(intercept = well_data$intercept_1, slope = well_data$slope_3, colour = line_3, lty = 2, size = 1.25)
}
print(p)
} # close loop through wells
if (export_output == TRUE) {
dev.off()
} # close device
}
sink_plot(bmg_subset, bmg_fits, export_output = FALSE)
sink_rate <- function(database_fits, sample_depth = 3.8, export_output = TRUE, save_as = "Sinking_Rates.csv") {
## ----------------------------------------------------------------------------
plot_by <- paste(database_fits$Plate, database_fits$Well)
wells <- unique(plot_by)
Sink_Rates <- NULL
for (w in 1:length(wells)) {
focus_well <- wells[w]
well_data <- dplyr::filter(database, focus_well == plot_by)
# Calculate 3 sinking rates
sink_rate_1 <- - ((well_data$slope_1) / (well_data$intercept_1 - well_data$well_bottom)) * sample_depth
sink_1_LCI <- - ((well_data$slope_1_LCI) / (well_data$intercept_1 - well_data$well_bottom)) * sample_depth
sink_1_UCI <- - ((well_data$slope_1_UCI) / (well_data$intercept_1 - well_data$well_bottom)) * sample_depth
sink_rate_2 <- - ((well_data$slope_2) / (well_data$intercept_1 - well_data$well_bottom)) * sample_depth
sink_2_LCI <- - ((well_data$slope_2_LCI) / (well_data$intercept_1 - well_data$well_bottom)) * sample_depth
sink_2_UCI <- - ((well_data$slope_2_UCI) / (well_data$intercept_1 - well_data$well_bottom)) * sample_depth
sink_rate_3 <- - ((well_data$slope_3) / (well_data$intercept_1 - well_data$well_bottom)) * sample_depth
sink_3_LCI <- - ((well_data$slope_3_LCI) / (well_data$intercept_1 - well_data$well_bottom)) * sample_depth
sink_3_UCI <- - ((well_data$slope_3_UCI) / (well_data$intercept_1 - well_data$well_bottom)) * sample_depth
sink_rates <- as.data.frame(cbind(well_data[1, ],
sink_rate_1, sink_rate_2, sink_rate_3,
sink_1_LCI, sink_1_UCI,
sink_2_LCI, sink_2_UCI,
sink_3_LCI, sink_3_UCI))
Sink_Rates <- rbind(Sink_Rates, sink_rates)
} # end of loop through wells
if (export_output == TRUE) {
write.csv(Sink_Rates, file = save_as, row.names = F)
} # close export
return(Sink_Rates)
} # end of function
sink_rate <- function(database_fits, sample_depth = 3.8, export_output = TRUE, save_as = "Sinking_Rates.csv") {
## ----------------------------------------------------------------------------
plot_by <- paste(database_fits$Plate, database_fits$Well)
wells <- unique(plot_by)
Sink_Rates <- NULL
for (w in 1:length(wells)) {
focus_well <- wells[w]
well_data <- dplyr::filter(database, focus_well == plot_by)
# Calculate 3 sinking rates
sink_rate_1 <- - ((well_data$slope_1) / (well_data$intercept_1 - well_data$well_bottom)) * sample_depth
sink_1_LCI <- - ((well_data$slope_1_LCI) / (well_data$intercept_1 - well_data$well_bottom)) * sample_depth
sink_1_UCI <- - ((well_data$slope_1_UCI) / (well_data$intercept_1 - well_data$well_bottom)) * sample_depth
sink_rate_2 <- - ((well_data$slope_2) / (well_data$intercept_1 - well_data$well_bottom)) * sample_depth
sink_2_LCI <- - ((well_data$slope_2_LCI) / (well_data$intercept_1 - well_data$well_bottom)) * sample_depth
sink_2_UCI <- - ((well_data$slope_2_UCI) / (well_data$intercept_1 - well_data$well_bottom)) * sample_depth
sink_rate_3 <- - ((well_data$slope_3) / (well_data$intercept_1 - well_data$well_bottom)) * sample_depth
sink_3_LCI <- - ((well_data$slope_3_LCI) / (well_data$intercept_1 - well_data$well_bottom)) * sample_depth
sink_3_UCI <- - ((well_data$slope_3_UCI) / (well_data$intercept_1 - well_data$well_bottom)) * sample_depth
sink_rates <- as.data.frame(cbind(well_data[1, ],
sink_rate_1, sink_rate_2, sink_rate_3,
sink_1_LCI, sink_1_UCI,
sink_2_LCI, sink_2_UCI,
sink_3_LCI, sink_3_UCI))
Sink_Rates <- rbind(Sink_Rates, sink_rates)
} # end of loop through wells
if (export_output == TRUE) {
write.csv(Sink_Rates, file = save_as, row.names = F)
} # close export
return(Sink_Rates)
} # end of function
bmg_rates <- sink_rate(bmg_fits, export_output = FALSE)
View(bmg_fits)
traceback()
sink_rate <- function(database_fits, sample_depth = 3.8, export_output = TRUE, save_as = "Sinking_Rates.csv") {
## ----------------------------------------------------------------------------
plot_by <- paste(database_fits$Plate, database_fits$Well)
wells <- unique(plot_by)
Sink_Rates <- NULL
for (w in 1:length(wells)) {
focus_well <- wells[w]
well_data <- dplyr::filter(database_fits, focus_well == plot_by)
# Calculate 3 sinking rates
sink_rate_1 <- - ((well_data$slope_1) / (well_data$intercept_1 - well_data$well_bottom)) * sample_depth
sink_1_LCI <- - ((well_data$slope_1_LCI) / (well_data$intercept_1 - well_data$well_bottom)) * sample_depth
sink_1_UCI <- - ((well_data$slope_1_UCI) / (well_data$intercept_1 - well_data$well_bottom)) * sample_depth
sink_rate_2 <- - ((well_data$slope_2) / (well_data$intercept_1 - well_data$well_bottom)) * sample_depth
sink_2_LCI <- - ((well_data$slope_2_LCI) / (well_data$intercept_1 - well_data$well_bottom)) * sample_depth
sink_2_UCI <- - ((well_data$slope_2_UCI) / (well_data$intercept_1 - well_data$well_bottom)) * sample_depth
sink_rate_3 <- - ((well_data$slope_3) / (well_data$intercept_1 - well_data$well_bottom)) * sample_depth
sink_3_LCI <- - ((well_data$slope_3_LCI) / (well_data$intercept_1 - well_data$well_bottom)) * sample_depth
sink_3_UCI <- - ((well_data$slope_3_UCI) / (well_data$intercept_1 - well_data$well_bottom)) * sample_depth
sink_rates <- as.data.frame(cbind(well_data[1, ],
sink_rate_1, sink_rate_2, sink_rate_3,
sink_1_LCI, sink_1_UCI,
sink_2_LCI, sink_2_UCI,
sink_3_LCI, sink_3_UCI))
Sink_Rates <- rbind(Sink_Rates, sink_rates)
} # end of loop through wells
if (export_output == TRUE) {
write.csv(Sink_Rates, file = save_as, row.names = F)
} # close export
return(Sink_Rates)
} # end of function
bmg_rates <- sink_rate(bmg_fits, export_output = FALSE)
View(bmg_rates)
sink_plot(bmg_subset, bmg_fits, export_output = FALSE, shared_int = TRUE)
sink_plot <- function(database_rfu, database_fits, size = 3, shape = 6, colour = "darkgreen", fill = "white",
shared_int = FALSE, line_1 = "red", line_2 = "blue", line_3 = "black",
export_output = TRUE, save_as = "Sinking_Plots.pdf") {
## -----------------------------------------------------------------------------------------
database <- dplyr::inner_join(database_rfu, database_fits)
plot_by <- paste(database$Plate, database$Well)
wells <- unique(plot_by)
if (export_output == TRUE) {
pdf(save_as)
}
for (w in 1:length(wells)) {
focus_well <- wells[w]
well_data <- dplyr::filter(database, focus_well == plot_by)
p <- ggplot2::ggplot(well_data, ggplot2::aes(Elapsed.Time.m, sqrt(RFU))) +
ggplot2::geom_point(size = size, shape = shape, colour = colour, fill = fill) +
ggplot2::theme_classic() +
ggplot2::labs(x = "Elapsed time (minutes)", y = "sqrt(RFU)", title = well_data$Well) +
ggplot2::theme(axis.title = ggplot2::element_text(size = 16, colour = "black", face = "bold")) +
ggplot2::theme(axis.text = ggplot2::element_text(size = 16, colour = "black")) +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5, size = 18, face = "bold"))
if (shared_int == FALSE) {
p <- p +
ggplot2::geom_abline(intercept = well_data$intercept_1, slope = well_data$slope_1, colour = line_1, lty = 2, size = 1.25) +
ggplot2::geom_abline(intercept = well_data$intercept_2, slope = well_data$slope_2, colour = line_2, lty = 2, size = 1.25) +
ggplot2::geom_abline(intercept = well_data$intercept_3, slope = well_data$slope_3, colour = line_3, lty = 2, size = 1.25)
} else if (shared_int == TRUE) {
p <- p +
ggplot2::geom_abline(intercept = well_data$intercept_1[1], slope = well_data$slope_1, colour = line_1, lty = 2, size = 1.25) +
ggplot2::geom_abline(intercept = well_data$intercept_1[1], slope = well_data$slope_2, colour = line_2, lty = 2, size = 1.25) +
ggplot2::geom_abline(intercept = well_data$intercept_1[1], slope = well_data$slope_3, colour = line_3, lty = 2, size = 1.25)
}
print(p)
} # close loop through wells
if (export_output == TRUE) {
dev.off()
} # close device
}
sink_plot(bmg_subset, bmg_fits, export_output = FALSE, shared_int = TRUE)
View(spmx_fits)
sink_plot <- function(database_rfu, database_fits, size = 3, shape = 6, colour = "darkgreen", fill = "white",
shared_int = FALSE, line_1 = "red", line_2 = "blue", line_3 = "black",
export_output = FALSE, save_as = "Sinking_Plots.pdf") {
## -----------------------------------------------------------------------------------------
database <- dplyr::inner_join(database_rfu, database_fits)
plot_by <- paste(database$Plate, database$Well)
wells <- unique(plot_by)
if (export_output == TRUE) {
pdf(save_as)
}
for (w in 1:length(wells)) {
focus_well <- wells[w]
well_data <- dplyr::filter(database, focus_well == plot_by)
p <- ggplot2::ggplot(well_data, ggplot2::aes(Elapsed.Time.m, sqrt(RFU))) +
ggplot2::geom_point(size = size, shape = shape, colour = colour, fill = fill) +
ggplot2::theme_classic() +
ggplot2::labs(x = "Elapsed time (minutes)", y = "sqrt(RFU)", title = well_data$Well) +
ggplot2::theme(axis.title = ggplot2::element_text(size = 16, colour = "black", face = "bold")) +
ggplot2::theme(axis.text = ggplot2::element_text(size = 16, colour = "black")) +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5, size = 18, face = "bold"))
if (shared_int == FALSE) {
p <- p +
ggplot2::geom_abline(intercept = well_data$intercept_1, slope = well_data$slope_1, colour = line_1, lty = 2, size = 1.25) +
ggplot2::geom_abline(intercept = well_data$intercept_2, slope = well_data$slope_2, colour = line_2, lty = 2, size = 1.25) +
ggplot2::geom_abline(intercept = well_data$intercept_3, slope = well_data$slope_3, colour = line_3, lty = 2, size = 1.25)
} else if (shared_int == TRUE) {
p <- p +
ggplot2::geom_abline(intercept = well_data$intercept_1[1], slope = well_data$slope_1, colour = line_1, lty = 2, size = 1.25) +
ggplot2::geom_abline(intercept = well_data$intercept_1[1], slope = well_data$slope_2, colour = line_2, lty = 2, size = 1.25) +
ggplot2::geom_abline(intercept = well_data$intercept_1[1], slope = well_data$slope_3, colour = line_3, lty = 2, size = 1.25)
}
print(p)
} # close loop through wells
if (export_output == TRUE) {
dev.off()
} # close device
}
sink_plot(bmg_subset, bmg_fits, export_output = FALSE, shared_int = TRUE)
source('~/Dropbox/Melissa Honours 18-19/sinkworx/R/import functions.R', echo=TRUE)
source('~/Dropbox/Melissa Honours 18-19/sinkworx/R/rfu.R', echo=TRUE)
source('~/Dropbox/Melissa Honours 18-19/sinkworx/R/sink fit.R', echo=TRUE)
source('~/Dropbox/Melissa Honours 18-19/sinkworx/R/sink rate.R', echo=TRUE)
sink_cat <- read.csv(file = file.choose())
spmx <- sink_spmx("Sinking Spectramax", sink_cat, save_as = "Sink_Spmx.csv")
spmx <- sink_spmx("Sinking Spectramax", sink_cat, save_as = "Sink_Spmx.csv")
spmx <- sink_spmx("Sinking Spectramax", sink_cat, export_output = T, save_as = "Sink_Spmx.csv")
sink_rfu(spmx, save_as = "Spmx_plots.pdf", colour = "darkpink")
sink_rfu(spmx, save_as = "Spmx_plots.pdf", colour = "hotpink")
spmx <- sink_spmx("Sinking Spectramax", sink_cat, export_output = T, save_as = "Sink_Spmx.csv")
sink_rfu(spmx, save_as = "Spmx_plots.pdf", export_output = T, colour = "purple")
sink_rfu(spmx, size = 5, shape = 1, save_as = "Spmx_plots.pdf", export_output = T, colour = "purple")
sink_rfu(spmx, colour = "blue")
spmx_fit <- sink_fit(spmx, breakpoints = c(2, 5), export_output = T, save_as = "Spmx_param.csv")
View(spmx_fit)
spmx_rates <- sink_rate(spmx_fit)
View(spmx_rates)
sink_plot(spmx, spmx_fit, line_2 = "purple", line_1 = "orange", export_output = T)
sink_plot(spmx, spmx_fit, line_2 = "purple", line_1 = "orange")
View(spmx_rates)
View(spmx_rates)
sink_plot(spmx, spmx_fit, line_2 = "purple", line_1 = "orange", shared_int = TRUE)
5 *0.002
0.01/10000
1e-06*1000
0.001*1000
10/0.2
2000000*5
200*50
200*50
2000*5
2*0.5
1/0.2
50*5
250/0.01
250/10000
5*5
25/10000
0.0025*1000
5000/10
500*50
25000/5000
5000*5
25000/10
sink_cat <- read.csv(file = file.choose())
View(sink_cat)
bmg <- sink_bmg("Sinking BMG", sink_cat)
View(bmg)
View(bmg)
View(sink_cat)
bmg_subset <- dplyr::filter(bmg, Mut.ID == "ChlamyDCMU")
View(bmg_subset)
sink_rfu(bmg_subset. colour = "darkblue", size = 3, shape = 1)
sink_rfu(bmg_subset, colour = "darkblue", size = 3, shape = 1)
sink_rfu(bmg_subset, colour = "darkblue", size = 3, shape = 1, export_output = T)
View(spmx_rates)
View(spmx_fit)
source('~/Dropbox/Melissa Honours 18-19/sinkworx/R/import functions.R', echo=TRUE)
source('~/Dropbox/Melissa Honours 18-19/sinkworx/R/sink fit.R', echo=TRUE)
source('~/Dropbox/Melissa Honours 18-19/sinkworx/R/sink rate.R', echo=TRUE)
source('~/Dropbox/Melissa Honours 18-19/sinkworx/R/sink plots.R', echo=TRUE)
sink_cat <- read.csv(file = file.choose())
bmg <- sink_bmg("Sinking BMG", sink_cat)
pilot <- dplyr::filter(bmg, Mut.ID == "ClarioPilot96")
sink_rfu(pilot)
source('~/Dropbox/Melissa Honours 18-19/sinkworx/R/rfu.R', echo=TRUE)
sink_rfu(pilot)
View(sink_cat)
View(pilot)
weiss <- dplyr::filter(bmg, Mut.ID == "WeissTest")
sink_rfu(weiss)
sink_rfu(weiss, colour = "royalblue")
sink_rfu(weiss, colour = "darkblue")
dcmu <- dplyr::filter(bmg, Mut.ID == "ChlamyDCMU")
sink_rfu(dcmu, colour = "red3")
dcmu_fit <- sink_fit(dcmu)
View(dcmu_fit)
sink_plot(dcmu, dcmu_fit)
16*12
23000/12
23000/3
7666*2
3156*3
9468 + 1074 +380 +450
23500-11372
12128/12
3156 +1074
23500/3
7833.33-4230
3603.33/4
900.83-625
getRversion()
install.packages("devtools")
devtools::document()
devtools::check_man()
devtools::check_man()
devtools::build()
devtools::check()
devtools::install()
sinkworx::sink_bmg()
sinkworx
?sinkworx
??sinkworx
devtools::build()
devtools::install()
devtools::document()
devtools::document()
devtools::document()
devtools::build()
devtools::check_man()
devtools::check_man()
devtools::build()
devtools::install()
devtools::document()
devtools::build()
devtools::install()
devtools::document()
devtools::check_man()
devtools::build()
devtools::install()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
library(sinkworx)
devtools::install()
ERRORS
ERRORS()
devtools::load_all(".")
devtools::install_github("mlrioux/sinkworx", mater)
devtools::install_github("mlrioux/sinkworx", master)
devtools::install_github("mlrioux/sinkworx")
Sys.setenv("TAR" = "internal")
devtools::install_github("mlrioux/sinkworx")
devtools::install_github("mlrioux/sinkworx")
